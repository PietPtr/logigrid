// Generated by purs bundle 0.14.7
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var bind = function (dict) {
      return dict.bind;
  };
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  exports["cons"] = cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["reflectSymbol"] = reflectSymbol;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var eqString = {
      eq: $foreign.eqStringImpl
  };
  var eqRowNil = {
      eqRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return true;
              };
          };
      }
  };
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function () {
      return function (dictEqRecord) {
          return {
              eq: eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
          };
      };
  };
  var eqNumber = {
      eq: $foreign.eqNumberImpl
  };
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  var eqBoolean = {
      eq: $foreign.eqBooleanImpl
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqRowCons = function (dictEqRecord) {
      return function () {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return {
                      eqRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var get = Record_Unsafe.unsafeGet(key);
                                  return eq(dictEq)(get(ra))(get(rb)) && tail;
                              };
                          };
                      }
                  };
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = {
      eq: function (v) {
          return function (v1) {
              if (v instanceof LT && v1 instanceof LT) {
                  return true;
              };
              if (v instanceof GT && v1 instanceof GT) {
                  return true;
              };
              if (v instanceof EQ && v1 instanceof EQ) {
                  return true;
              };
              return false;
          };
      }
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Proxy = $PS["Type.Proxy"];
  var ordString = {
      compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqString;
      }
  };
  var ordRecordNil = {
      compareRecord: function (v) {
          return function (v1) {
              return function (v2) {
                  return Data_Ordering.EQ.value;
              };
          };
      },
      EqRecord0: function () {
          return Data_Eq.eqRowNil;
      }
  };
  var ordNumber = {
      compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqNumber;
      }
  };
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compareRecord = function (dict) {
      return dict.compareRecord;
  };
  var ordRecord = function () {
      return function (dictOrdRecord) {
          return {
              compare: compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
              Eq0: function () {
                  return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
              }
          };
      };
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var ordRecordCons = function (dictOrdRecord) {
      return function () {
          return function (dictIsSymbol) {
              return function (dictOrd) {
                  return {
                      compareRecord: function (v) {
                          return function (ra) {
                              return function (rb) {
                                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                                  var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                                  var $56 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                                  if ($56) {
                                      return left;
                                  };
                                  return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                              };
                          };
                      },
                      EqRecord0: function () {
                          return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                      }
                  };
              };
          };
      };
  };
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordRecordNil"] = ordRecordNil;
  exports["ordRecordCons"] = ordRecordCons;
  exports["ordRecord"] = ordRecord;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var top = function (dict) {
      return dict.top;
  };
  var boundedInt = {
      top: $foreign.topInt,
      bottom: $foreign.bottomInt,
      Ord0: function () {
          return Data_Ord.ordInt;
      }
  };
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];  
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $168 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($168) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 454, column 3 - line 454, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["traverse_"] = traverse_;
  exports["minimumBy"] = minimumBy;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var unfoldable1List = {
      unfoldr1: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v.value1 instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value1.value0;
                              $copy_memo = new Cons(v.value0, memo);
                              return;
                          };
                          if (v.value1 instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      }
  };
  var unfoldableList = {
      unfoldr: function (f) {
          return function (b) {
              var go = function ($copy_source) {
                  return function ($copy_memo) {
                      var $tco_var_source = $copy_source;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(source, memo) {
                          var v = f(source);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_source = v.value0.value1;
                              $copy_memo = new Cons(v.value0.value0, memo);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_source, $copy_memo);
                      };
                      return $tco_result;
                  };
              };
              return go(b)(Nil.value);
          };
      },
      Unfoldable10: function () {
          return unfoldable1List;
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var bindList = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 165, column 1 - line 167, column 37): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Tuple = $PS["Data.Tuple"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, acc) {
                              if (v instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List (line 795, column 3 - line 795, column 21): " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
              };
              return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function ($copy_s) {
                  return function ($copy_e) {
                      return function ($copy_step) {
                          return function ($copy_rest) {
                              var $tco_var_s = $copy_s;
                              var $tco_var_e = $copy_e;
                              var $tco_var_step = $copy_step;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      $tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_s = s + step | 0;
                                      $tco_var_e = e;
                                      $tco_var_step = step;
                                      $copy_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List (line 152, column 3 - line 153, column 65): " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                              };
                              return $tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $225 = start > end;
                  if ($225) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List (line 148, column 1 - line 148, column 32): " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List (line 394, column 3 - line 394, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  exports["range"] = range;
  exports["filter"] = filter;
  exports["zip"] = zip;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];            
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  exports["unfoldr"] = unfoldr;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return new Data_Maybe.Just(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 591, column 18 - line 600, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 590, column 3 - line 590, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 211, column 5 - line 211, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 620, column 1 - line 620, column 38): " + [ v.constructor.name ]);
  };
  var functorMap = {
      map: function (v) {
          return function (v1) {
              if (v1 instanceof Leaf) {
                  return Leaf.value;
              };
              if (v1 instanceof Two) {
                  return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
              };
              if (v1 instanceof Three) {
                  return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
              };
              throw new Error("Failed pattern match at Data.Map.Internal (line 101, column 1 - line 104, column 110): " + [ v.constructor.name, v1.constructor.name ]);
          };
      }
  };
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 432, column 3 - line 437, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 429, column 1 - line 429, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 5 - line 473, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 465, column 3 - line 465, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done1 = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done1 = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 448, column 3 - line 448, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 9 - line 542, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 522, column 5 - line 542, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done1 = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done1 = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 554, column 5 - line 558, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done2 = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 545, column 33 - line 549, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done2) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done3 = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done3 = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done3 = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 34 - line 518, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done3) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 563, column 15 - line 565, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var update = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["update"] = update;
  exports["keys"] = keys;
  exports["functorMap"] = functorMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var $$Set = function (x) {
      return x;
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var fromMap = $$Set;
  var foldableSet = {
      foldMap: function (dictMonoid) {
          return function (f) {
              var $72 = Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f);
              return function ($73) {
                  return $72(toList($73));
              };
          };
      },
      foldl: function (f) {
          return function (x) {
              var $74 = Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x);
              return function ($75) {
                  return $74(toList($75));
              };
          };
      },
      foldr: function (f) {
          return function (x) {
              var $76 = Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x);
              return function ($77) {
                  return $76(toList($77));
              };
          };
      }
  };
  exports["fromMap"] = fromMap;
  exports["foldableSet"] = foldableSet;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Map"] = $PS["Data.Map"] || {};
  var exports = $PS["Data.Map"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Set = $PS["Data.Set"];
  var keys = (function () {
      var $20 = Data_Functor["void"](Data_Map_Internal.functorMap);
      return function ($21) {
          return Data_Set.fromMap($20($21));
      };
  })();
  exports["keys"] = keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Typelevel.Num.Sets"] = $PS["Data.Typelevel.Num.Sets"] || {};
  var exports = $PS["Data.Typelevel.Num.Sets"];
  var natD8 = {
      toInt: function (v) {
          return 8;
      }
  };
  var posD8 = {
      Nat0: function () {
          return natD8;
      }
  };
  var natD7 = {
      toInt: function (v) {
          return 7;
      }
  };
  var posD7 = {
      Nat0: function () {
          return natD7;
      }
  };
  var natD6 = {
      toInt: function (v) {
          return 6;
      }
  };
  var posD6 = {
      Nat0: function () {
          return natD6;
      }
  };
  var natD5 = {
      toInt: function (v) {
          return 5;
      }
  };
  var posD5 = {
      Nat0: function () {
          return natD5;
      }
  };
  var natD4 = {
      toInt: function (v) {
          return 4;
      }
  };
  var posD4 = {
      Nat0: function () {
          return natD4;
      }
  };
  var natD3 = {
      toInt: function (v) {
          return 3;
      }
  };
  var posD3 = {
      Nat0: function () {
          return natD3;
      }
  };
  var natD2 = {
      toInt: function (v) {
          return 2;
      }
  };
  var posD2 = {
      Nat0: function () {
          return natD2;
      }
  };
  var natD1 = {
      toInt: function (v) {
          return 1;
      }
  };
  var posD1 = {
      Nat0: function () {
          return natD1;
      }
  };
  var natD0 = {
      toInt: function (v) {
          return 0;
      }
  };
  exports["natD0"] = natD0;
  exports["natD1"] = natD1;
  exports["natD2"] = natD2;
  exports["natD3"] = natD3;
  exports["natD4"] = natD4;
  exports["natD5"] = natD5;
  exports["natD6"] = natD6;
  exports["natD7"] = natD7;
  exports["natD8"] = natD8;
  exports["posD1"] = posD1;
  exports["posD2"] = posD2;
  exports["posD3"] = posD3;
  exports["posD4"] = posD4;
  exports["posD5"] = posD5;
  exports["posD6"] = posD6;
  exports["posD7"] = posD7;
  exports["posD8"] = posD8;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Typelevel.Num.Ops"] = $PS["Data.Typelevel.Num.Ops"] || {};
  var exports = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];                  
  var typelevelSucc = function (dictPos) {
      return function () {
          return function (dictDivMod10) {
              return function () {
                  return function (dictDivMod101) {
                      return {
                          Nat0: dictDivMod10.Nat1,
                          Pos1: function () {
                              return dictPos;
                          }
                      };
                  };
              };
          };
      };
  };
  var divMod10D8D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var divMod10D7D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD7;
      }
  };
  var divMod10D6D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD6;
      }
  };
  var divMod10D5D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var divMod10D4D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD4;
      }
  };
  var divMod10D3D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD3;
      }
  };
  var divMod10D2D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD2;
      }
  };
  var divMod10D1D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD1;
      }
  };
  var divMod10D0D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD0;
      }
  };
  exports["typelevelSucc"] = typelevelSucc;
  exports["divMod10D0D0"] = divMod10D0D0;
  exports["divMod10D1D0"] = divMod10D1D0;
  exports["divMod10D2D0"] = divMod10D2D0;
  exports["divMod10D3D0"] = divMod10D3D0;
  exports["divMod10D4D0"] = divMod10D4D0;
  exports["divMod10D5D0"] = divMod10D5D0;
  exports["divMod10D6D0"] = divMod10D6D0;
  exports["divMod10D7D0"] = divMod10D7D0;
  exports["divMod10D8D0"] = divMod10D8D0;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Vec"] = $PS["Data.Vec"] || {};
  var exports = $PS["Data.Vec"];
  var Data_Array = $PS["Data.Array"];
  var empty = [  ];
  var cons = function (dictSucc) {
      return function (x) {
          return function (v) {
              return Data_Array.cons(x)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["cons"] = cons;
})(PS);
(function(exports) {
  "use strict";

  // Alias require to prevent webpack or browserify from actually requiring.
  var req = typeof module === "undefined" ? undefined : module.require;
  var util = (function() {
    try {
      return req === undefined ? undefined : req("util");
    } catch(e) {
      return undefined;
    }
  })();

  exports._spy = function (tag, x) {
    if (util !== undefined) {
      console.log(tag + ":", util.inspect(x, { depth: null, colors: true }));
    } else {
      console.log(tag + ":", x);
    }
    return x;
  };
})(PS["Debug"] = PS["Debug"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Debug"] = $PS["Debug"] || {};
  var exports = $PS["Debug"];
  var $foreign = $PS["Debug"];
  var spy = function () {
      return function (tag) {
          return function (a) {
              return $foreign["_spy"](tag, a);
          };
      };
  };
  exports["spy"] = spy;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.tryLoadImageImpl = function (src) {
    return function(e) {
          return function(f) {
              return function () {
                  var img = new Image();
                  img.src = src;
                  img.addEventListener("load", function() {
                      f(img)();
                  }, false);
                  img.addEventListener("error", function(error) {
                      e();
                  }, false);
              }
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.setStrokeStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.strokeStyle = style;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.setFont = function(ctx) {
      return function(fontspec) {
          return function() {
              ctx.font = fontspec;
          };
      };
  };

  exports.drawImageScale = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function(dWidth) {
                      return function(dHeight) {
                          return function() {
                              ctx.drawImage(image_source, dx, dy, dWidth, dHeight);
                          };
                      };
                  };
              };
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var tryLoadImage = function (path) {
      return function (k) {
          return $foreign.tryLoadImageImpl(path)(k(Data_Maybe.Nothing.value))(function ($46) {
              return k(Data_Maybe.Just.create($46));
          });
      };
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var a = path();
              $foreign.stroke(ctx)();
              return a;
          };
      };
  };
  var setCanvasDimensions = function (ce) {
      return function (d) {
          return Control_Apply.applySecond(Effect.applyEffect)($foreign.setCanvasHeight(ce)(d.height))($foreign.setCanvasWidth(ce)(d.width));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var w = $foreign.getCanvasWidth(ce)();
          var h = $foreign.getCanvasHeight(ce)();
          return {
              width: w,
              height: h
          };
      };
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var a = path();
              $foreign.fill(ctx)();
              return a;
          };
      };
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["setCanvasDimensions"] = setCanvasDimensions;
  exports["strokePath"] = strokePath;
  exports["fillPath"] = fillPath;
  exports["tryLoadImage"] = tryLoadImage;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["rect"] = $foreign.rect;
  exports["clearRect"] = $foreign.clearRect;
  exports["setFont"] = $foreign.setFont;
  exports["drawImageScale"] = $foreign.drawImageScale;
})(PS);
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Signal.Time"] = $PS["Signal.Time"] || {};
  var exports = $PS["Signal.Time"];
  var $foreign = $PS["Signal.Time"];
  exports["now"] = $foreign.now;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["State"] = $PS["State"] || {};
  var exports = $PS["State"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Vec = $PS["Data.Vec"];                
  var GridTile = (function () {
      function GridTile() {

      };
      GridTile.value = new GridTile();
      return GridTile;
  })();
  var GridInput = (function () {
      function GridInput() {

      };
      GridInput.value = new GridInput();
      return GridInput;
  })();
  var GridOutput = (function () {
      function GridOutput() {

      };
      GridOutput.value = new GridOutput();
      return GridOutput;
  })();
  var GridIOSwitch = (function () {
      function GridIOSwitch() {

      };
      GridIOSwitch.value = new GridIOSwitch();
      return GridIOSwitch;
  })();
  var GridRouter = (function () {
      function GridRouter() {

      };
      GridRouter.value = new GridRouter();
      return GridRouter;
  })();
  var eqGridType = {
      eq: function (x) {
          return function (y) {
              if (x instanceof GridTile && y instanceof GridTile) {
                  return true;
              };
              if (x instanceof GridInput && y instanceof GridInput) {
                  return true;
              };
              if (x instanceof GridOutput && y instanceof GridOutput) {
                  return true;
              };
              if (x instanceof GridIOSwitch && y instanceof GridIOSwitch) {
                  return true;
              };
              if (x instanceof GridRouter && y instanceof GridRouter) {
                  return true;
              };
              return false;
          };
      }
  };
  var verticalTracks = function (nx) {
      return function (ny) {
          var makeTrack = function (v) {
              return {};
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(nx - 1 | 0))(function (x) {
              return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(ny - 1 | 0))(function (y) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)({
                      x: (x * 2 | 0) - 1 | 0,
                      y: y * 2 | 0
                  });
              });
          });
          return Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function () {
                  return "y";
              }
          })(Data_Ord.ordInt))()({
              reflectSymbol: function () {
                  return "x";
              }
          })(Data_Ord.ordInt)))(Data_List_Types.foldableList)(Data_List.zip(coords)(Data_Functor.map(Data_List_Types.functorList)(makeTrack)(coords)));
      };
  };
  var tiles = function (nx) {
      return function (ny) {
          var makeTile = function (v) {
              return {
                  arity: 2,
                  config: {
                      lutConfig: Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_List_Types.foldableList)(new Data_List_Types.Cons(new Data_Tuple.Tuple(0, false), new Data_List_Types.Cons(new Data_Tuple.Tuple(1, false), new Data_List_Types.Cons(new Data_Tuple.Tuple(2, false), new Data_List_Types.Cons(new Data_Tuple.Tuple(3, false), Data_List_Types.Nil.value))))),
                      regmux: false
                  },
                  netState: {
                      porta: false,
                      portb: false,
                      lutOut: false,
                      regOut: false,
                      muxOut: false
                  }
              };
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(nx - 1 | 0))(function (x) {
              return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(ny - 1 | 0))(function (y) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)({
                      x: x * 2 | 0,
                      y: y * 2 | 0
                  });
              });
          });
          return Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function () {
                  return "y";
              }
          })(Data_Ord.ordInt))()({
              reflectSymbol: function () {
                  return "x";
              }
          })(Data_Ord.ordInt)))(Data_List_Types.foldableList)(Data_List.zip(coords)(Data_Functor.map(Data_List_Types.functorList)(makeTile)(coords)));
      };
  };
  var routingSwitches = function (nx) {
      return function (ny) {
          var makeSwitch = function (v) {
              return {
                  config: Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(false)(Data_Vec.empty))))))))
              };
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(nx - 1 | 0))(function (x) {
              return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(ny - 1 | 0))(function (y) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)({
                      x: (x * 2 | 0) - 1 | 0,
                      y: (y * 2 | 0) - 1 | 0
                  });
              });
          });
          return Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function () {
                  return "y";
              }
          })(Data_Ord.ordInt))()({
              reflectSymbol: function () {
                  return "x";
              }
          })(Data_Ord.ordInt)))(Data_List_Types.foldableList)(Data_List.zip(coords)(Data_Functor.map(Data_List_Types.functorList)(makeSwitch)(coords)));
      };
  };
  var outputs = function (nx) {
      return function (ny) {
          var makeOutput = function (v) {
              return {
                  state: false
              };
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(nx - 1 | 0))(function (x) {
              return Control_Applicative.pure(Data_List_Types.applicativeList)({
                  x: 2 * x | 0,
                  y: (ny * 2 | 0) - 1 | 0
              });
          });
          return Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function () {
                  return "y";
              }
          })(Data_Ord.ordInt))()({
              reflectSymbol: function () {
                  return "x";
              }
          })(Data_Ord.ordInt)))(Data_List_Types.foldableList)(Data_List.zip(coords)(Data_Functor.map(Data_List_Types.functorList)(makeOutput)(coords)));
      };
  };
  var ioSwitches = function (nx) {
      return function (ny) {
          var makeSwitch = function (v) {
              return {
                  config: Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(false)(Data_Vec.empty)))))),
                  wireState: {
                      aWire: false,
                      bWire: false,
                      yWire: false,
                      trackUp: false,
                      trackDown: false
                  }
              };
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(nx - 1 | 0))(function (x) {
              return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(ny - 1 | 0))(function (y) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)({
                      x: x * 2 | 0,
                      y: (y * 2 | 0) - 1 | 0
                  });
              });
          });
          return Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function () {
                  return "y";
              }
          })(Data_Ord.ordInt))()({
              reflectSymbol: function () {
                  return "x";
              }
          })(Data_Ord.ordInt)))(Data_List_Types.foldableList)(Data_List.zip(coords)(Data_Functor.map(Data_List_Types.functorList)(makeSwitch)(coords)));
      };
  };
  var inputs = function (nx) {
      return function (ny) {
          var makeInput = function (v) {
              return {
                  statea: false,
                  stateb: true
              };
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(nx - 1 | 0))(function (x) {
              return Control_Applicative.pure(Data_List_Types.applicativeList)({
                  x: x * 2 | 0,
                  y: -1 | 0
              });
          });
          return Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
              reflectSymbol: function () {
                  return "y";
              }
          })(Data_Ord.ordInt))()({
              reflectSymbol: function () {
                  return "x";
              }
          })(Data_Ord.ordInt)))(Data_List_Types.foldableList)(Data_List.zip(coords)(Data_Functor.map(Data_List_Types.functorList)(makeInput)(coords)));
      };
  };
  var findInMap = function (dictOrd) {
      return function (coords) {
          return function (map) {
              var v = Data_Map_Internal.lookup(dictOrd)(coords)(map);
              if (v instanceof Data_Maybe.Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at State (line 286, column 40 - line 287, column 16): " + [ v.constructor.name ]);
          };
      };
  };
  var switchInInput = function (f) {
      return function (coords) {
          return function (state) {
              var tile = findInMap(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function () {
                      return "y";
                  }
              })(Data_Ord.ordInt))()({
                  reflectSymbol: function () {
                      return "x";
                  }
              })(Data_Ord.ordInt)))(coords)(state.inputs);
              var inputs$prime = Data_Map_Internal.insert(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function () {
                      return "y";
                  }
              })(Data_Ord.ordInt))()({
                  reflectSymbol: function () {
                      return "x";
                  }
              })(Data_Ord.ordInt)))(coords)(f(tile))(state.inputs);
              return {
                  tiles: state.tiles,
                  ioSwitches: state.ioSwitches,
                  routingSwitches: state.routingSwitches,
                  verticalTracks: state.verticalTracks,
                  inputs: inputs$prime,
                  outputs: state.outputs,
                  player: state.player,
                  keyMap: state.keyMap,
                  imageMap: state.imageMap,
                  dimensions: state.dimensions
              };
          };
      };
  };
  var switchPortA = switchInInput(function (tile) {
      return {
          statea: !tile.statea,
          stateb: tile.stateb
      };
  });
  var switchPortB = switchInInput(function (tile) {
      return {
          statea: tile.statea,
          stateb: !tile.stateb
      };
  });
  var switchInTile = function (f) {
      return function (coords) {
          return function (state) {
              var tile = findInMap(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function () {
                      return "y";
                  }
              })(Data_Ord.ordInt))()({
                  reflectSymbol: function () {
                      return "x";
                  }
              })(Data_Ord.ordInt)))(coords)(state.tiles);
              var tiles$prime = Data_Map_Internal.insert(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function () {
                      return "y";
                  }
              })(Data_Ord.ordInt))()({
                  reflectSymbol: function () {
                      return "x";
                  }
              })(Data_Ord.ordInt)))(coords)(f(tile))(state.tiles);
              return {
                  tiles: tiles$prime,
                  ioSwitches: state.ioSwitches,
                  routingSwitches: state.routingSwitches,
                  verticalTracks: state.verticalTracks,
                  inputs: state.inputs,
                  outputs: state.outputs,
                  player: state.player,
                  keyMap: state.keyMap,
                  imageMap: state.imageMap,
                  dimensions: state.dimensions
              };
          };
      };
  };
  var switchLUTXX = function (x) {
      return switchInTile(function (tile) {
          return {
              arity: tile.arity,
              config: {
                  lutConfig: Data_Map_Internal.update(Data_Ord.ordInt)(function (v1) {
                      return new Data_Maybe.Just(!v1);
                  })(x)(tile.config.lutConfig),
                  regmux: tile.config.regmux
              },
              netState: tile.netState
          };
      });
  };
  var switchLUT00 = switchLUTXX(0);
  var switchLUT01 = switchLUTXX(1);
  var switchLUT10 = switchLUTXX(2);
  var switchLUT11 = switchLUTXX(3);
  var switchMux = switchInTile(function (tile) {
      return {
          arity: tile.arity,
          config: {
              lutConfig: tile.config.lutConfig,
              regmux: !tile.config.regmux
          },
          netState: tile.netState
      };
  });
  var interActions = new Data_List_Types.Cons({
      gridType: GridInput.value,
      x: 0.165,
      y: 0.575,
      f: switchPortA
  }, new Data_List_Types.Cons({
      gridType: GridInput.value,
      x: 0.835,
      y: 0.575,
      f: switchPortB
  }, new Data_List_Types.Cons({
      gridType: GridTile.value,
      x: 0.632,
      y: 0.789,
      f: switchMux
  }, new Data_List_Types.Cons({
      gridType: GridTile.value,
      x: 0.31,
      y: 0.11,
      f: switchLUT00
  }, new Data_List_Types.Cons({
      gridType: GridTile.value,
      x: 0.31,
      y: 0.26,
      f: switchLUT01
  }, new Data_List_Types.Cons({
      gridType: GridTile.value,
      x: 0.31,
      y: 0.371,
      f: switchLUT10
  }, new Data_List_Types.Cons({
      gridType: GridTile.value,
      x: 0.31,
      y: 0.502,
      f: switchLUT11
  }, Data_List_Types.Nil.value)))))));
  var defaultState = {
      tiles: tiles(3)(3),
      ioSwitches: ioSwitches(3)(3),
      routingSwitches: routingSwitches(3)(3),
      verticalTracks: verticalTracks(3)(3),
      inputs: inputs(3)(3),
      outputs: outputs(3)(3),
      player: {
          x: 0.0,
          y: 0.0
      },
      keyMap: {
          up: false,
          left: false,
          right: false,
          down: false
      },
      imageMap: Data_Map_Internal.empty,
      dimensions: {
          height: 0.0,
          width: 0.0
      }
  };
  exports["defaultState"] = defaultState;
  exports["GridTile"] = GridTile;
  exports["GridInput"] = GridInput;
  exports["GridOutput"] = GridOutput;
  exports["GridIOSwitch"] = GridIOSwitch;
  exports["GridRouter"] = GridRouter;
  exports["interActions"] = interActions;
  exports["eqGridType"] = eqGridType;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports.innerWidth = function (window) {
    return function () {
      return window.innerWidth;
    };
  };

  exports.innerHeight = function (window) {
    return function () {
      return window.innerHeight;
    };
  };

  exports.requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["innerWidth"] = $foreign.innerWidth;
  exports["innerHeight"] = $foreign.innerHeight;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS);
(function(exports) {
  "use strict";

  exports.code = function (e) {
    return e.code;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent"] = $PS["Web.UIEvent.KeyboardEvent"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent"];
  var $foreign = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                           
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("KeyboardEvent");
  exports["fromEvent"] = fromEvent;
  exports["code"] = $foreign.code;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map = $PS["Data.Map"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Debug = $PS["Debug"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];
  var Signal_Time = $PS["Signal.Time"];
  var State = $PS["State"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_KeyboardEvent = $PS["Web.UIEvent.KeyboardEvent"];                
  var updatePlayer = function (dt) {
      return function (state) {
          var vertical = (function () {
              if (state.keyMap.up) {
                  return -1.0;
              };
              if (state.keyMap.down) {
                  return 1.0;
              };
              return 0.0;
          })();
          var horizontal = (function () {
              if (state.keyMap.left) {
                  return -1.0;
              };
              if (state.keyMap.right) {
                  return 1.0;
              };
              return 0.0;
          })();
          return {
              x: state.player.x + horizontal * dt * 337.5,
              y: state.player.y + vertical * dt * 337.5
          };
      };
  };
  var tilesize = 300.0;
  var map2list = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
  var loadImages = function (stateRef) {
      return function (fileNames) {
          var loadImage = function (name) {
              var callback = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return function __do() {
                          Effect_Ref.modify(function (state) {
                              return {
                                  imageMap: Data_Map_Internal.insert(Data_Ord.ordString)(name)(v.value0)(state.imageMap),
                                  dimensions: state.dimensions,
                                  inputs: state.inputs,
                                  ioSwitches: state.ioSwitches,
                                  keyMap: state.keyMap,
                                  outputs: state.outputs,
                                  player: state.player,
                                  routingSwitches: state.routingSwitches,
                                  tiles: state.tiles,
                                  verticalTracks: state.verticalTracks
                              };
                          })(stateRef)();
                          return Data_Unit.unit;
                      };
                  };
                  throw new Error("Failed pattern match at Main (line 95, column 17 - line 95, column 45): " + [ v.constructor.name ]);
              };
              return Graphics_Canvas.tryLoadImage(name)(callback);
          };
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(loadImage)(fileNames);
      };
  };
  var keyHandler = function (b) {
      return function (state) {
          return function (event) {
              var updateKeyMap = function (keyCode) {
                  return function (state1) {
                      if (keyCode === "KeyW") {
                          return {
                              keyMap: {
                                  up: b,
                                  down: state1.keyMap.down,
                                  left: state1.keyMap.left,
                                  right: state1.keyMap.right
                              },
                              dimensions: state1.dimensions,
                              imageMap: state1.imageMap,
                              inputs: state1.inputs,
                              ioSwitches: state1.ioSwitches,
                              outputs: state1.outputs,
                              player: state1.player,
                              routingSwitches: state1.routingSwitches,
                              tiles: state1.tiles,
                              verticalTracks: state1.verticalTracks
                          };
                      };
                      if (keyCode === "KeyS") {
                          return {
                              keyMap: {
                                  down: b,
                                  up: state1.keyMap.up,
                                  left: state1.keyMap.left,
                                  right: state1.keyMap.right
                              },
                              dimensions: state1.dimensions,
                              imageMap: state1.imageMap,
                              inputs: state1.inputs,
                              ioSwitches: state1.ioSwitches,
                              outputs: state1.outputs,
                              player: state1.player,
                              routingSwitches: state1.routingSwitches,
                              tiles: state1.tiles,
                              verticalTracks: state1.verticalTracks
                          };
                      };
                      if (keyCode === "KeyA") {
                          return {
                              keyMap: {
                                  left: b,
                                  down: state1.keyMap.down,
                                  up: state1.keyMap.up,
                                  right: state1.keyMap.right
                              },
                              dimensions: state1.dimensions,
                              imageMap: state1.imageMap,
                              inputs: state1.inputs,
                              ioSwitches: state1.ioSwitches,
                              outputs: state1.outputs,
                              player: state1.player,
                              routingSwitches: state1.routingSwitches,
                              tiles: state1.tiles,
                              verticalTracks: state1.verticalTracks
                          };
                      };
                      if (keyCode === "KeyD") {
                          return {
                              keyMap: {
                                  right: b,
                                  down: state1.keyMap.down,
                                  left: state1.keyMap.left,
                                  up: state1.keyMap.up
                              },
                              dimensions: state1.dimensions,
                              imageMap: state1.imageMap,
                              inputs: state1.inputs,
                              ioSwitches: state1.ioSwitches,
                              outputs: state1.outputs,
                              player: state1.player,
                              routingSwitches: state1.routingSwitches,
                              tiles: state1.tiles,
                              verticalTracks: state1.verticalTracks
                          };
                      };
                      return state1;
                  };
              };
              var v = Web_UIEvent_KeyboardEvent.fromEvent(event);
              if (v instanceof Data_Maybe.Just) {
                  return function __do() {
                      Effect_Ref.modify(updateKeyMap(Web_UIEvent_KeyboardEvent.code(v.value0)))(state)();
                      return Data_Unit.unit;
                  };
              };
              throw new Error("Failed pattern match at Main (line 314, column 9 - line 314, column 42): " + [ v.constructor.name ]);
          };
      };
  };
  var keyUpHandler = keyHandler(false);
  var keyDownHandler = keyHandler(true);
  var images = (function () {
      var tileActives = Data_Functor.map(Data_List_Types.functorList)(function (x) {
          return "resources/tile/" + (x + ".svg");
      })(new Data_List_Types.Cons("porta", new Data_List_Types.Cons("portb", new Data_List_Types.Cons("lutOut", new Data_List_Types.Cons("regOut", new Data_List_Types.Cons("muxOut", Data_List_Types.Nil.value))))));
      var manual = new Data_List_Types.Cons("resources/tile.svg", new Data_List_Types.Cons("resources/ioswitch.svg", new Data_List_Types.Cons("resources/router.svg", new Data_List_Types.Cons("resources/track.svg", new Data_List_Types.Cons("resources/crossbar.svg", new Data_List_Types.Cons("resources/one.svg", new Data_List_Types.Cons("resources/zero.svg", new Data_List_Types.Cons("resources/input.svg", new Data_List_Types.Cons("resources/input_a.svg", new Data_List_Types.Cons("resources/input_b.svg", new Data_List_Types.Cons("resources/output.svg", new Data_List_Types.Cons("resources/muxreg.svg", new Data_List_Types.Cons("resources/muxlut.svg", Data_List_Types.Nil.value)))))))))))));
      return Data_Semigroup.append(Data_List_Types.semigroupList)(manual)(tileActives);
  })();
  var id = function (a) {
      return a;
  };
  var drawPlayer = function (canvas) {
      return function (stateRef) {
          return function __do() {
              var state = Effect_Ref.read(stateRef)();
              var ctx = Graphics_Canvas.getContext2D(canvas)();
              var dims = Graphics_Canvas.getCanvasDimensions(canvas)();
              Graphics_Canvas.setFillStyle(ctx)("#2e82e8")();
              return Graphics_Canvas.fillPath(ctx)(Graphics_Canvas.rect(ctx)({
                  x: dims.width / 2.0,
                  y: dims.height / 2.0,
                  width: 35.0,
                  height: 35.0
              }))();
          };
      };
  };
  var drawFromImageMap = function (state) {
      return function (ctx) {
          return function (filename) {
              return function (drawx) {
                  return function (drawy) {
                      return function (scale) {
                          var v = Data_Map_Internal.lookup(Data_Ord.ordString)("resources/" + (filename + ".svg"))(state.imageMap);
                          if (v instanceof Data_Maybe.Just) {
                              return Graphics_Canvas.drawImageScale(ctx)(v.value0)(drawx)(drawy)(scale)(scale);
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              return Effect_Console.log("Cannot find image " + (filename + ".svg in resources folder."));
                          };
                          throw new Error("Failed pattern match at Main (line 201, column 5 - line 203, column 89): " + [ v.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var drawTiles = function (canvas) {
      return function (stateRef) {
          var tilePos = function (state) {
              return function (x) {
                  return function (y) {
                      var drawy = Data_Int.toNumber(y) * tilesize - state.player.y;
                      var drawx = Data_Int.toNumber(x) * tilesize - state.player.x;
                      return new Data_Tuple.Tuple(drawx, drawy);
                  };
              };
          };
          var drawTileActives = function (state) {
              return function (ctx) {
                  return function (v) {
                      var ifDraw = function (isActive) {
                          return function (name) {
                              var v1 = tilePos(state)(v.value0.x)(v.value0.y);
                              if (isActive) {
                                  var v2 = Data_Map_Internal.lookup(Data_Ord.ordString)("resources/tile/" + (name + ".svg"))(state.imageMap);
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return Graphics_Canvas.drawImageScale(ctx)(v2.value0)(v1.value0)(v1.value1)(tilesize)(tilesize);
                                  };
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                                  };
                                  throw new Error("Failed pattern match at Main (line 283, column 29 - line 285, column 53): " + [ v2.constructor.name ]);
                              };
                              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                          };
                      };
                      return function __do() {
                          ifDraw(v.value1.netState.porta)("porta")();
                          ifDraw(v.value1.netState.portb)("portb")();
                          ifDraw(v.value1.netState.lutOut)("lutOut")();
                          ifDraw(v.value1.netState.regOut)("regOut")();
                          return ifDraw(v.value1.netState.muxOut)("muxOut")();
                      };
                  };
              };
          };
          var drawSVGat = function (filename) {
              return function (loc) {
                  return function (state) {
                      return function (ctx) {
                          var v = tilePos(state)(loc.x)(loc.y);
                          return function __do() {
                              Graphics_Canvas.setFillStyle(ctx)("#ffffff00")();
                              Graphics_Canvas.setStrokeStyle(ctx)("#cccccc")();
                              Graphics_Canvas.strokePath(ctx)(Graphics_Canvas.rect(ctx)({
                                  x: v.value0,
                                  y: v.value1,
                                  width: tilesize,
                                  height: tilesize
                              }))();
                              return drawFromImageMap(state)(ctx)(filename)(v.value0)(v.value1)(tilesize)();
                          };
                      };
                  };
              };
          };
          var drawTile = function (state) {
              return function (ctx) {
                  return function (v) {
                      var value = function (b) {
                          if (b) {
                              return "one";
                          };
                          return "zero";
                      };
                      var drawLutConfig = function (v1) {
                          var v2 = tilePos(state)(v.value0.x)(v.value0.y);
                          return drawFromImageMap(state)(ctx)(value(v1.value1))(v2.value0)(v2.value1 + Data_Int.toNumber(v1.value0) * 0.126 * tilesize)(tilesize);
                      };
                      return function __do() {
                          drawSVGat("tile")(v.value0)(state)(ctx)();
                          Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(drawLutConfig)(map2list(v.value1.config.lutConfig))();
                          if (v.value1.config.regmux) {
                              return drawSVGat("muxreg")(v.value0)(state)(ctx)();
                          };
                          return drawSVGat("muxlut")(v.value0)(state)(ctx)();
                      };
                  };
              };
          };
          var drawTrack = function (state) {
              return function (ctx) {
                  return function (trackLoc) {
                      return drawSVGat("track")(trackLoc)(state)(ctx);
                  };
              };
          };
          var drawRouter = function (state) {
              return function (ctx) {
                  return function (routerLoc) {
                      return drawSVGat("router")(routerLoc)(state)(ctx);
                  };
              };
          };
          var drawOutput = function (state) {
              return function (ctx) {
                  return function (v) {
                      return drawSVGat("output")(v.value0)(state)(ctx);
                  };
              };
          };
          var drawInput = function (state) {
              return function (ctx) {
                  return function (v) {
                      return function __do() {
                          drawSVGat("input")(v.value0)(state)(ctx)();
                          (function () {
                              if (v.value1.statea) {
                                  return drawSVGat("input_a")(v.value0)(state)(ctx)();
                              };
                              return Data_Unit.unit;
                          })();
                          if (v.value1.stateb) {
                              return drawSVGat("input_b")(v.value0)(state)(ctx)();
                          };
                          return Data_Unit.unit;
                      };
                  };
              };
          };
          var drawIOSwitch = function (state) {
              return function (ctx) {
                  return function (switchLoc) {
                      return drawSVGat("ioswitch")(switchLoc)(state)(ctx);
                  };
              };
          };
          return function __do() {
              var state = Effect_Ref.read(stateRef)();
              var ctx = Graphics_Canvas.getContext2D(canvas)();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(drawTile(state)(ctx))(map2list(state.tiles))();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(drawTileActives(state)(ctx))(map2list(state.tiles))();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Set.foldableSet)(drawIOSwitch(state)(ctx))(Data_Map.keys(state.ioSwitches))();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Set.foldableSet)(drawRouter(state)(ctx))(Data_Map.keys(state.routingSwitches))();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Set.foldableSet)(drawTrack(state)(ctx))(Data_Map.keys(state.verticalTracks))();
              Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(drawInput(state)(ctx))(map2list(state.inputs))();
              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(drawOutput(state)(ctx))(map2list(state.outputs))();
          };
      };
  };
  var draw = function (stateRef) {
      return function (canvas) {
          return function __do() {
              var ctx = Graphics_Canvas.getContext2D(canvas)();
              var dims = Graphics_Canvas.getCanvasDimensions(canvas)();
              Graphics_Canvas.clearRect(ctx)({
                  x: 0.0,
                  y: 0.0,
                  width: dims.width,
                  height: dims.height
              })();
              drawTiles(canvas)(stateRef)();
              drawPlayer(canvas)(stateRef)();
              return Data_Unit.unit;
          };
      };
  };
  var decPart = function (x) {
      return x - Data_Int.toNumber(Data_Int.floor(x));
  };
  var b2i = function (v) {
      if (v) {
          return 1;
      };
      if (!v) {
          return 0;
      };
      throw new Error("Failed pattern match at Main (line 158, column 1 - line 158, column 13): " + [ v.constructor.name ]);
  };
  var updateTile = function (state) {
      return function (v) {
          var searchInputs = (function () {
              var v1 = Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function () {
                      return "y";
                  }
              })(Data_Ord.ordInt))()({
                  reflectSymbol: function () {
                      return "x";
                  }
              })(Data_Ord.ordInt)))({
                  x: v.value0.x,
                  y: -1 | 0
              })(state.inputs);
              if (v1 instanceof Data_Maybe.Just) {
                  return v1.value0;
              };
              throw new Error("Failed pattern match at Main (line 189, column 40 - line 190, column 28): " + [ v1.constructor.name ]);
          })();
          var searchIOSwitches = (function () {
              var v1 = Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function () {
                      return "y";
                  }
              })(Data_Ord.ordInt))()({
                  reflectSymbol: function () {
                      return "x";
                  }
              })(Data_Ord.ordInt)))(v.value0)(state.ioSwitches);
              if (v1 instanceof Data_Maybe.Just) {
                  return {
                      statea: v1.value0.wireState.aWire,
                      stateb: v1.value0.wireState.bWire
                  };
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return {
                      statea: false,
                      stateb: false
                  };
              };
              throw new Error("Failed pattern match at Main (line 193, column 44 - line 195, column 54): " + [ v1.constructor.name ]);
          })();
          var findDriverValues = (function () {
              var $94 = v.value0.y === 0;
              if ($94) {
                  return searchInputs;
              };
              return searchIOSwitches;
          })();
          var lutID = (b2i(findDriverValues.statea) * 2 | 0) + b2i(findDriverValues.stateb) | 0;
          var lutOut$prime = (function () {
              var v1 = Data_Map_Internal.lookup(Data_Ord.ordInt)(lutID)(v.value1.config.lutConfig);
              if (v1 instanceof Data_Maybe.Just) {
                  return v1.value0;
              };
              throw new Error("Failed pattern match at Main (line 174, column 35 - line 175, column 32): " + [ v1.constructor.name ]);
          })();
          var muxOut$prime = (function () {
              if (v.value1.config.regmux) {
                  return v.value1.netState.regOut;
              };
              return lutOut$prime;
          })();
          return new Data_Tuple.Tuple(v.value0, {
              netState: {
                  porta: findDriverValues.statea,
                  portb: findDriverValues.stateb,
                  lutOut: lutOut$prime,
                  regOut: v.value1.netState.regOut,
                  muxOut: muxOut$prime
              },
              arity: v.value1.arity,
              config: v.value1.config
          });
      };
  };
  var updateTiles = function (state) {
      return Data_Map_Internal.fromFoldable(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
          reflectSymbol: function () {
              return "y";
          }
      })(Data_Ord.ordInt))()({
          reflectSymbol: function () {
              return "x";
          }
      })(Data_Ord.ordInt)))(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(updateTile(state))(map2list(state.tiles)));
  };
  var updateGameState = function (dt) {
      return function (state) {
          return {
              tiles: updateTiles(state),
              ioSwitches: state.ioSwitches,
              routingSwitches: state.routingSwitches,
              verticalTracks: state.verticalTracks,
              inputs: state.inputs,
              outputs: state.outputs,
              player: updatePlayer(dt)(state),
              keyMap: state.keyMap,
              imageMap: state.imageMap,
              dimensions: state.dimensions
          };
      };
  };
  var update = function (dt) {
      return function (stateRef) {
          return function __do() {
              Effect_Ref.modify(updateGameState(dt))(stateRef)();
              return Data_Unit.unit;
          };
      };
  };
  var execFrame = function (previousMillis) {
      return function (stateRef) {
          return function (canvas) {
              return function (w) {
                  return function __do() {
                      var millis = Signal_Time.now();
                      var state = Effect_Ref.read(stateRef)();
                      var dims = Graphics_Canvas.getCanvasDimensions(canvas)();
                      update((millis - previousMillis) / 1000.0)(stateRef)();
                      draw(stateRef)(canvas)();
                      Web_HTML_Window.requestAnimationFrame(execFrame(millis)(stateRef)(canvas)(w))(w)();
                      return Data_Unit.unit;
                  };
              };
          };
      };
  };
  var applyInteractable = function (stateRef) {
      var findAndApply = function (state) {
          var playery$prime = state.player.y + state.dimensions.height / 2.0;
          var playerx$prime = state.player.x + state.dimensions.width / 2.0;
          var relativePlayerPos = Debug.spy()("pos")({
              x: decPart(playerx$prime / tilesize),
              y: decPart(playery$prime / tilesize)
          });
          var distanceFromPlayer = function (ia) {
              return $$Math.pow(ia.x - relativePlayerPos.x)(2.0) + $$Math.pow(ia.y - relativePlayerPos.y)(2.0);
          };
          var coords = {
              x: Data_Int.floor(playerx$prime / tilesize),
              y: Data_Int.floor(playery$prime / tilesize)
          };
          var equalCoords = function (e) {
              return e.x === coords.x && e.y === coords.y;
          };
          var tileType = (function () {
              var v = Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                  reflectSymbol: function () {
                      return "y";
                  }
              })(Data_Ord.ordInt))()({
                  reflectSymbol: function () {
                      return "x";
                  }
              })(Data_Ord.ordInt)))(coords)(state.inputs);
              if (v instanceof Data_Maybe.Just) {
                  return State.GridInput.value;
              };
              if (v instanceof Data_Maybe.Nothing) {
                  var v1 = Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                      reflectSymbol: function () {
                          return "y";
                      }
                  })(Data_Ord.ordInt))()({
                      reflectSymbol: function () {
                          return "x";
                      }
                  })(Data_Ord.ordInt)))(coords)(state.tiles);
                  if (v1 instanceof Data_Maybe.Just) {
                      return State.GridTile.value;
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      var v2 = Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                          reflectSymbol: function () {
                              return "y";
                          }
                      })(Data_Ord.ordInt))()({
                          reflectSymbol: function () {
                              return "x";
                          }
                      })(Data_Ord.ordInt)))(coords)(state.outputs);
                      if (v2 instanceof Data_Maybe.Just) {
                          return State.GridOutput.value;
                      };
                      if (v2 instanceof Data_Maybe.Nothing) {
                          var v3 = Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                              reflectSymbol: function () {
                                  return "y";
                              }
                          })(Data_Ord.ordInt))()({
                              reflectSymbol: function () {
                                  return "x";
                              }
                          })(Data_Ord.ordInt)))(coords)(state.ioSwitches);
                          if (v3 instanceof Data_Maybe.Just) {
                              return State.GridIOSwitch.value;
                          };
                          if (v3 instanceof Data_Maybe.Nothing) {
                              var v4 = Data_Map_Internal.lookup(Data_Ord.ordRecord()(Data_Ord.ordRecordCons(Data_Ord.ordRecordCons(Data_Ord.ordRecordNil)()({
                                  reflectSymbol: function () {
                                      return "y";
                                  }
                              })(Data_Ord.ordInt))()({
                                  reflectSymbol: function () {
                                      return "x";
                                  }
                              })(Data_Ord.ordInt)))(coords)(state.routingSwitches);
                              if (v4 instanceof Data_Maybe.Just) {
                                  return State.GridRouter.value;
                              };
                              throw new Error("Failed pattern match at Main (line 380, column 44 - line 381, column 59): " + [ v4.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Main (line 378, column 40 - line 381, column 59): " + [ v3.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Main (line 376, column 36 - line 381, column 59): " + [ v2.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Main (line 374, column 32 - line 381, column 59): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Main (line 372, column 44 - line 381, column 59): " + [ v.constructor.name ]);
          })();
          var interactables = Data_List.filter(function (ia) {
              return Data_Eq.eq(State.eqGridType)(ia.gridType)(tileType);
          })(State.interActions);
          var stateFunc = (function () {
              var v = Data_Foldable.minimumBy(Data_List_Types.foldableList)(function (v1) {
                  return function (v2) {
                      return Data_Ord.compare(Data_Ord.ordNumber)(v1.value0)(v2.value0);
                  };
              })(Data_List.zip(Data_Functor.map(Data_List_Types.functorList)(distanceFromPlayer)(interactables))(interactables));
              if (v instanceof Data_Maybe.Just) {
                  var $117 = v.value0.value0 < 5.0e-2;
                  if ($117) {
                      return v.value0.value1.f(coords);
                  };
                  return id;
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return id;
              };
              throw new Error("Failed pattern match at Main (line 392, column 29 - line 398, column 34): " + [ v.constructor.name ]);
          })();
          return stateFunc(state);
      };
      return function __do() {
          var state = Effect_Ref.read(stateRef)();
          Effect_Ref.modify(findAndApply)(stateRef)();
          return Data_Unit.unit;
      };
  };
  var keyPressHandler = function (stateRef) {
      return function (event) {
          var v = Web_UIEvent_KeyboardEvent.fromEvent(event);
          if (v instanceof Data_Maybe.Just) {
              var v1 = Debug.spy()("")(Web_UIEvent_KeyboardEvent.code(v.value0));
              if (v1 === "KeyE") {
                  return applyInteractable(stateRef);
              };
              if (v1 === "Space") {
                  return applyInteractable(stateRef);
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at Main (line 333, column 9 - line 333, column 42): " + [ v.constructor.name ]);
      };
  };
  var setKeyEvents = function (stateRef) {
      return function (target) {
          return function __do() {
              var downListener = Web_Event_EventTarget.eventListener(keyDownHandler(stateRef))();
              Web_Event_EventTarget.addEventListener("keydown")(downListener)(false)(target)();
              var upListener = Web_Event_EventTarget.eventListener(keyUpHandler(stateRef))();
              Web_Event_EventTarget.addEventListener("keyup")(upListener)(false)(target)();
              var pressListener = Web_Event_EventTarget.eventListener(keyPressHandler(stateRef))();
              return Web_Event_EventTarget.addEventListener("keypress")(pressListener)(false)(target)();
          };
      };
  };
  var main = Data_Functor["void"](Effect.functorEffect)(function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      if (v instanceof Data_Maybe.Just) {
          var ctx = Graphics_Canvas.getContext2D(v.value0)();
          var w = Web_HTML.window();
          var windowWidth = Web_HTML_Window.innerWidth(w)();
          var windowHeight = Web_HTML_Window.innerHeight(w)();
          Graphics_Canvas.setCanvasDimensions(v.value0)({
              height: Data_Int.toNumber(windowHeight),
              width: Data_Int.toNumber(windowWidth)
          })();
          Graphics_Canvas.setFillStyle(ctx)("#abc9ee")();
          Graphics_Canvas.setStrokeStyle(ctx)("#000000")();
          var state = Effect_Ref["new"]({
              dimensions: {
                  height: Data_Int.toNumber(windowHeight),
                  width: Data_Int.toNumber(windowWidth)
              },
              imageMap: State.defaultState.imageMap,
              inputs: State.defaultState.inputs,
              ioSwitches: State.defaultState.ioSwitches,
              keyMap: State.defaultState.keyMap,
              outputs: State.defaultState.outputs,
              player: State.defaultState.player,
              routingSwitches: State.defaultState.routingSwitches,
              tiles: State.defaultState.tiles,
              verticalTracks: State.defaultState.verticalTracks
          })();
          setKeyEvents(state)(Web_HTML_Window.toEventTarget(w))();
          Graphics_Canvas.setFont(ctx)("15px monospace")();
          loadImages(state)(images)();
          Web_HTML_Window.requestAnimationFrame(execFrame(0.0)(state)(v.value0)(w))(w)();
          return Data_Unit.unit;
      };
      throw new Error("Failed pattern match at Main (line 64, column 5 - line 64, column 49): " + [ v.constructor.name ]);
  });
  exports["images"] = images;
  exports["main"] = main;
  exports["loadImages"] = loadImages;
  exports["execFrame"] = execFrame;
  exports["draw"] = draw;
  exports["update"] = update;
  exports["updateGameState"] = updateGameState;
  exports["updatePlayer"] = updatePlayer;
  exports["updateTiles"] = updateTiles;
  exports["b2i"] = b2i;
  exports["updateTile"] = updateTile;
  exports["tilesize"] = tilesize;
  exports["drawFromImageMap"] = drawFromImageMap;
  exports["map2list"] = map2list;
  exports["drawTiles"] = drawTiles;
  exports["drawPlayer"] = drawPlayer;
  exports["keyHandler"] = keyHandler;
  exports["keyDownHandler"] = keyDownHandler;
  exports["keyUpHandler"] = keyUpHandler;
  exports["keyPressHandler"] = keyPressHandler;
  exports["setKeyEvents"] = setKeyEvents;
  exports["applyInteractable"] = applyInteractable;
  exports["decPart"] = decPart;
  exports["id"] = id;
})(PS);
PS["Main"].main();