// Generated by purs bundle 0.14.7
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var bind = function (dict) {
      return dict.bind;
  };
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  exports["cons"] = cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($317) {
                      return $316(f($317));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["traverse_"] = traverse_;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = {
      map: listMap
  };                                                                   
  var foldableList = {
      foldr: function (f) {
          return function (b) {
              var rev = (function () {
                  var go = function ($copy_acc) {
                      return function ($copy_v) {
                          var $tco_var_acc = $copy_acc;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(acc, v) {
                              if (v instanceof Nil) {
                                  $tco_done = true;
                                  return acc;
                              };
                              if (v instanceof Cons) {
                                  $tco_var_acc = new Cons(v.value0, acc);
                                  $copy_v = v.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_acc, $copy_v);
                          };
                          return $tco_result;
                      };
                  };
                  return go(Nil.value);
              })();
              var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
              return function ($206) {
                  return $205(rev($206));
              };
          };
      },
      foldl: function (f) {
          var go = function ($copy_b) {
              return function ($copy_v) {
                  var $tco_var_b = $copy_b;
                  var $tco_done1 = false;
                  var $tco_result;
                  function $tco_loop(b, v) {
                      if (v instanceof Nil) {
                          $tco_done1 = true;
                          return b;
                      };
                      if (v instanceof Cons) {
                          $tco_var_b = f(b)(v.value0);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done1) {
                      $tco_result = $tco_loop($tco_var_b, $copy_v);
                  };
                  return $tco_result;
              };
          };
          return go;
      },
      foldMap: function (dictMonoid) {
          return function (f) {
              return Data_Foldable.foldl(foldableList)(function (acc) {
                  var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                  return function ($208) {
                      return $207(f($208));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      }
  };
  var semigroupList = {
      append: function (xs) {
          return function (ys) {
              return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
      }
  };
  var applyList = {
      apply: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Functor0: function () {
          return functorList;
      }
  };
  var bindList = {
      bind: function (v) {
          return function (v1) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
              };
              throw new Error("Failed pattern match at Data.List.Types (line 165, column 1 - line 167, column 37): " + [ v.constructor.name, v1.constructor.name ]);
          };
      },
      Apply0: function () {
          return applyList;
      }
  };
  var applicativeList = {
      pure: function (a) {
          return new Cons(a, Nil.value);
      },
      Apply0: function () {
          return applyList;
      }
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function ($copy_s) {
                  return function ($copy_e) {
                      return function ($copy_step) {
                          return function ($copy_rest) {
                              var $tco_var_s = $copy_s;
                              var $tco_var_e = $copy_e;
                              var $tco_var_step = $copy_step;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      $tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_s = s + step | 0;
                                      $tco_var_e = e;
                                      $tco_var_step = step;
                                      $copy_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List (line 152, column 3 - line 153, column 65): " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                              };
                              return $tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $225 = start > end;
                  if ($225) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List (line 148, column 1 - line 148, column 32): " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["range"] = range;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Typelevel.Num.Sets"] = $PS["Data.Typelevel.Num.Sets"] || {};
  var exports = $PS["Data.Typelevel.Num.Sets"];
  var natD8 = {
      toInt: function (v) {
          return 8;
      }
  };
  var posD8 = {
      Nat0: function () {
          return natD8;
      }
  };
  var natD7 = {
      toInt: function (v) {
          return 7;
      }
  };
  var posD7 = {
      Nat0: function () {
          return natD7;
      }
  };
  var natD6 = {
      toInt: function (v) {
          return 6;
      }
  };
  var posD6 = {
      Nat0: function () {
          return natD6;
      }
  };
  var natD5 = {
      toInt: function (v) {
          return 5;
      }
  };
  var posD5 = {
      Nat0: function () {
          return natD5;
      }
  };
  var natD4 = {
      toInt: function (v) {
          return 4;
      }
  };
  var posD4 = {
      Nat0: function () {
          return natD4;
      }
  };
  var natD3 = {
      toInt: function (v) {
          return 3;
      }
  };
  var posD3 = {
      Nat0: function () {
          return natD3;
      }
  };
  var natD2 = {
      toInt: function (v) {
          return 2;
      }
  };
  var posD2 = {
      Nat0: function () {
          return natD2;
      }
  };
  var natD1 = {
      toInt: function (v) {
          return 1;
      }
  };
  var posD1 = {
      Nat0: function () {
          return natD1;
      }
  };
  var natD0 = {
      toInt: function (v) {
          return 0;
      }
  };
  exports["natD0"] = natD0;
  exports["natD1"] = natD1;
  exports["natD2"] = natD2;
  exports["natD3"] = natD3;
  exports["natD4"] = natD4;
  exports["natD5"] = natD5;
  exports["natD6"] = natD6;
  exports["natD7"] = natD7;
  exports["natD8"] = natD8;
  exports["posD1"] = posD1;
  exports["posD2"] = posD2;
  exports["posD3"] = posD3;
  exports["posD4"] = posD4;
  exports["posD5"] = posD5;
  exports["posD6"] = posD6;
  exports["posD7"] = posD7;
  exports["posD8"] = posD8;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Typelevel.Num.Ops"] = $PS["Data.Typelevel.Num.Ops"] || {};
  var exports = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];                  
  var typelevelSucc = function (dictPos) {
      return function () {
          return function (dictDivMod10) {
              return function () {
                  return function (dictDivMod101) {
                      return {
                          Nat0: dictDivMod10.Nat1,
                          Pos1: function () {
                              return dictPos;
                          }
                      };
                  };
              };
          };
      };
  };
  var divMod10D8D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD8;
      }
  };
  var divMod10D7D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD7;
      }
  };
  var divMod10D6D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD6;
      }
  };
  var divMod10D5D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD5;
      }
  };
  var divMod10D4D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD4;
      }
  };
  var divMod10D3D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD3;
      }
  };
  var divMod10D2D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD2;
      }
  };
  var divMod10D1D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD1;
      }
  };
  var divMod10D0D0 = {
      Nat0: function () {
          return Data_Typelevel_Num_Sets.natD0;
      },
      Nat1: function () {
          return Data_Typelevel_Num_Sets.natD0;
      }
  };
  exports["typelevelSucc"] = typelevelSucc;
  exports["divMod10D0D0"] = divMod10D0D0;
  exports["divMod10D1D0"] = divMod10D1D0;
  exports["divMod10D2D0"] = divMod10D2D0;
  exports["divMod10D3D0"] = divMod10D3D0;
  exports["divMod10D4D0"] = divMod10D4D0;
  exports["divMod10D5D0"] = divMod10D5D0;
  exports["divMod10D6D0"] = divMod10D6D0;
  exports["divMod10D7D0"] = divMod10D7D0;
  exports["divMod10D8D0"] = divMod10D8D0;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Vec"] = $PS["Data.Vec"] || {};
  var exports = $PS["Data.Vec"];
  var Data_Array = $PS["Data.Array"];
  var empty = [  ];
  var cons = function (dictSucc) {
      return function (x) {
          return function (v) {
              return Data_Array.cons(x)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["cons"] = cons;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad = $PS["Control.Monad"];                  
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.setStrokeStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.strokeStyle = style;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect = $PS["Effect"];
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var a = path();
              $foreign.stroke(ctx)();
              return a;
          };
      };
  };
  var setCanvasDimensions = function (ce) {
      return function (d) {
          return Control_Apply.applySecond(Effect.applyEffect)($foreign.setCanvasHeight(ce)(d.height))($foreign.setCanvasWidth(ce)(d.width));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var w = $foreign.getCanvasWidth(ce)();
          var h = $foreign.getCanvasHeight(ce)();
          return {
              width: w,
              height: h
          };
      };
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var a = path();
              $foreign.fill(ctx)();
              return a;
          };
      };
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["setCanvasDimensions"] = setCanvasDimensions;
  exports["strokePath"] = strokePath;
  exports["fillPath"] = fillPath;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["rect"] = $foreign.rect;
  exports["clearRect"] = $foreign.clearRect;
})(PS);
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Signal.Time"] = $PS["Signal.Time"] || {};
  var exports = $PS["Signal.Time"];
  var $foreign = $PS["Signal.Time"];
  exports["now"] = $foreign.now;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["State"] = $PS["State"] || {};
  var exports = $PS["State"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Typelevel_Num_Ops = $PS["Data.Typelevel.Num.Ops"];
  var Data_Typelevel_Num_Sets = $PS["Data.Typelevel.Num.Sets"];
  var Data_Vec = $PS["Data.Vec"];                
  var tiles = function (nx) {
      return function (ny) {
          var makeTile = function (v) {
              return {
                  x: v.value0,
                  y: v.value1,
                  arity: 2,
                  config: {
                      lutConfig: Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(Data_Maybe.Nothing.value)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(Data_Maybe.Nothing.value)(Data_Vec.empty)),
                      regmux: false
                  }
              };
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(nx - 1 | 0))(function (x) {
              return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(ny - 1 | 0))(function (y) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)(new Data_Tuple.Tuple(x * 2 | 0, y * 2 | 0));
              });
          });
          return Data_List.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(makeTile)(coords));
      };
  };
  var routingSwitches = function (nx) {
      return function (ny) {
          var makeSwitch = function (v) {
              return {
                  x: v.value0,
                  y: v.value1,
                  config: Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD8)()(Data_Typelevel_Num_Ops.divMod10D7D0)()(Data_Typelevel_Num_Ops.divMod10D8D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD7)()(Data_Typelevel_Num_Ops.divMod10D6D0)()(Data_Typelevel_Num_Ops.divMod10D7D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(false)(Data_Vec.empty))))))))
              };
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(nx - 1 | 0))(function (x) {
              return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(ny - 1 | 0))(function (y) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)(new Data_Tuple.Tuple((x * 2 | 0) - 1 | 0, (y * 2 | 0) - 1 | 0));
              });
          });
          return Data_List.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(makeSwitch)(coords));
      };
  };
  var ioSwitches = function (nx) {
      return function (ny) {
          var makeSwitch = function (v) {
              return {
                  x: v.value0,
                  y: v.value1,
                  config: Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD6)()(Data_Typelevel_Num_Ops.divMod10D5D0)()(Data_Typelevel_Num_Ops.divMod10D6D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD5)()(Data_Typelevel_Num_Ops.divMod10D4D0)()(Data_Typelevel_Num_Ops.divMod10D5D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD4)()(Data_Typelevel_Num_Ops.divMod10D3D0)()(Data_Typelevel_Num_Ops.divMod10D4D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD3)()(Data_Typelevel_Num_Ops.divMod10D2D0)()(Data_Typelevel_Num_Ops.divMod10D3D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD2)()(Data_Typelevel_Num_Ops.divMod10D1D0)()(Data_Typelevel_Num_Ops.divMod10D2D0))(false)(Data_Vec.cons(Data_Typelevel_Num_Ops.typelevelSucc(Data_Typelevel_Num_Sets.posD1)()(Data_Typelevel_Num_Ops.divMod10D0D0)()(Data_Typelevel_Num_Ops.divMod10D1D0))(false)(Data_Vec.empty))))))
              };
          };
          var coords = Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(1)(nx - 1 | 0))(function (x) {
              return Control_Bind.bind(Data_List_Types.bindList)(Data_List.range(0)(ny - 1 | 0))(function (y) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)(new Data_Tuple.Tuple((x * 2 | 0) - 1 | 0, y * 2 | 0));
              });
          });
          return Data_List.fromFoldable(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(makeSwitch)(coords));
      };
  };
  var defaultState = {
      tiles: tiles(3)(3),
      ioSwitches: ioSwitches(3)(3),
      routingSwitches: routingSwitches(3)(3),
      player: {
          x: 0.0,
          y: 0.0
      },
      keyMap: {
          up: false,
          left: false,
          right: false,
          down: false
      }
  };
  exports["defaultState"] = defaultState;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports.innerWidth = function (window) {
    return function () {
      return window.innerWidth;
    };
  };

  exports.innerHeight = function (window) {
    return function () {
      return window.innerHeight;
    };
  };

  exports.requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["innerWidth"] = $foreign.innerWidth;
  exports["innerHeight"] = $foreign.innerHeight;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS);
(function(exports) {
  "use strict";

  exports.code = function (e) {
    return e.code;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
    }
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent"] = $PS["Web.UIEvent.KeyboardEvent"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent"];
  var $foreign = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                           
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("KeyboardEvent");
  exports["fromEvent"] = fromEvent;
  exports["code"] = $foreign.code;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Signal_Time = $PS["Signal.Time"];
  var State = $PS["State"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_KeyboardEvent = $PS["Web.UIEvent.KeyboardEvent"];                
  var updatePlayer = function (dt) {
      return function (state) {
          var vertical = (function () {
              if (state.keyMap.up) {
                  return -1.0;
              };
              if (state.keyMap.down) {
                  return 1.0;
              };
              return 0.0;
          })();
          var horizontal = (function () {
              if (state.keyMap.left) {
                  return -1.0;
              };
              if (state.keyMap.right) {
                  return 1.0;
              };
              return 0.0;
          })();
          return {
              x: state.player.x + horizontal * dt * 400.0,
              y: state.player.y + vertical * dt * 400.0
          };
      };
  };
  var updateGameState = function (dt) {
      return function (state) {
          return {
              tiles: state.tiles,
              ioSwitches: state.ioSwitches,
              routingSwitches: state.routingSwitches,
              player: updatePlayer(dt)(state),
              keyMap: state.keyMap
          };
      };
  };
  var update = function (dt) {
      return function (stateRef) {
          return function __do() {
              Effect_Ref.modify(updateGameState(dt))(stateRef)();
              return Data_Unit.unit;
          };
      };
  };
  var tilesize = 200.0;
  var keyHandler = function (b) {
      return function (state) {
          return function (event) {
              var updateKeyMap = function (keyCode) {
                  return function (state1) {
                      if (keyCode === "KeyW") {
                          return {
                              keyMap: {
                                  up: b,
                                  down: state1.keyMap.down,
                                  left: state1.keyMap.left,
                                  right: state1.keyMap.right
                              },
                              ioSwitches: state1.ioSwitches,
                              player: state1.player,
                              routingSwitches: state1.routingSwitches,
                              tiles: state1.tiles
                          };
                      };
                      if (keyCode === "KeyS") {
                          return {
                              keyMap: {
                                  down: b,
                                  up: state1.keyMap.up,
                                  left: state1.keyMap.left,
                                  right: state1.keyMap.right
                              },
                              ioSwitches: state1.ioSwitches,
                              player: state1.player,
                              routingSwitches: state1.routingSwitches,
                              tiles: state1.tiles
                          };
                      };
                      if (keyCode === "KeyA") {
                          return {
                              keyMap: {
                                  left: b,
                                  down: state1.keyMap.down,
                                  up: state1.keyMap.up,
                                  right: state1.keyMap.right
                              },
                              ioSwitches: state1.ioSwitches,
                              player: state1.player,
                              routingSwitches: state1.routingSwitches,
                              tiles: state1.tiles
                          };
                      };
                      if (keyCode === "KeyD") {
                          return {
                              keyMap: {
                                  right: b,
                                  down: state1.keyMap.down,
                                  left: state1.keyMap.left,
                                  up: state1.keyMap.up
                              },
                              ioSwitches: state1.ioSwitches,
                              player: state1.player,
                              routingSwitches: state1.routingSwitches,
                              tiles: state1.tiles
                          };
                      };
                      return state1;
                  };
              };
              var v = Web_UIEvent_KeyboardEvent.fromEvent(event);
              if (v instanceof Data_Maybe.Just) {
                  return function __do() {
                      Effect_Ref.modify(updateKeyMap(Web_UIEvent_KeyboardEvent.code(v.value0)))(state)();
                      return Data_Unit.unit;
                  };
              };
              throw new Error("Failed pattern match at Main (line 147, column 9 - line 147, column 42): " + [ v.constructor.name ]);
          };
      };
  };
  var keyUpHandler = keyHandler(false);
  var keyDownHandler = keyHandler(true);
  var setKeyEvents = function (state) {
      return function (target) {
          return function __do() {
              var downListener = Web_Event_EventTarget.eventListener(keyDownHandler(state))();
              Web_Event_EventTarget.addEventListener("keydown")(downListener)(false)(target)();
              var upListener = Web_Event_EventTarget.eventListener(keyUpHandler(state))();
              return Web_Event_EventTarget.addEventListener("keyup")(upListener)(false)(target)();
          };
      };
  };
  var drawTiles = function (canvas) {
      return function (stateRef) {
          var drawTile = function (state) {
              return function (ctx) {
                  return function (tile) {
                      return Graphics_Canvas.strokePath(ctx)(Graphics_Canvas.rect(ctx)({
                          x: Data_Int.toNumber(tile.x) * tilesize - state.player.x,
                          y: Data_Int.toNumber(tile.y) * tilesize - state.player.y,
                          width: tilesize - 10.0,
                          height: tilesize - 10.0
                      }));
                  };
              };
          };
          return function __do() {
              var state = Effect_Ref.read(stateRef)();
              var ctx = Graphics_Canvas.getContext2D(canvas)();
              Graphics_Canvas.setFillStyle(ctx)("#ffffff00")();
              Graphics_Canvas.setStrokeStyle(ctx)("#000000")();
              return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_List_Types.foldableList)(drawTile(state)(ctx))(state.tiles)();
          };
      };
  };
  var drawPlayer = function (canvas) {
      return function (stateRef) {
          return function __do() {
              var state = Effect_Ref.read(stateRef)();
              var ctx = Graphics_Canvas.getContext2D(canvas)();
              var dims = Graphics_Canvas.getCanvasDimensions(canvas)();
              Graphics_Canvas.setFillStyle(ctx)("#2e82e8")();
              return Graphics_Canvas.fillPath(ctx)(Graphics_Canvas.rect(ctx)({
                  x: dims.width / 2.0,
                  y: dims.height / 2.0,
                  width: 35.0,
                  height: 35.0
              }))();
          };
      };
  };
  var draw = function (stateRef) {
      return function (canvas) {
          return function __do() {
              var ctx = Graphics_Canvas.getContext2D(canvas)();
              var dims = Graphics_Canvas.getCanvasDimensions(canvas)();
              Graphics_Canvas.clearRect(ctx)({
                  x: 0.0,
                  y: 0.0,
                  width: dims.width,
                  height: dims.height
              })();
              drawTiles(canvas)(stateRef)();
              drawPlayer(canvas)(stateRef)();
              return Data_Unit.unit;
          };
      };
  };
  var execFrame = function (previousMillis) {
      return function (stateRef) {
          return function (canvas) {
              return function (w) {
                  return function __do() {
                      var millis = Signal_Time.now();
                      update((millis - previousMillis) / 1000.0)(stateRef)();
                      draw(stateRef)(canvas)();
                      Web_HTML_Window.requestAnimationFrame(execFrame(millis)(stateRef)(canvas)(w))(w)();
                      return Data_Unit.unit;
                  };
              };
          };
      };
  };
  var main = Data_Functor["void"](Effect.functorEffect)(function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      if (v instanceof Data_Maybe.Just) {
          var ctx = Graphics_Canvas.getContext2D(v.value0)();
          var w = Web_HTML.window();
          var windowWidth = Web_HTML_Window.innerWidth(w)();
          var windowHeight = Web_HTML_Window.innerHeight(w)();
          Graphics_Canvas.setCanvasDimensions(v.value0)({
              height: Data_Int.toNumber(windowHeight),
              width: Data_Int.toNumber(windowWidth)
          })();
          Graphics_Canvas.setFillStyle(ctx)("#abc9ee")();
          Graphics_Canvas.setStrokeStyle(ctx)("#000000")();
          var state = Effect_Ref["new"](State.defaultState)();
          setKeyEvents(state)(Web_HTML_Window.toEventTarget(w))();
          Web_HTML_Window.requestAnimationFrame(execFrame(0.0)(state)(v.value0)(w))(w)();
          return Data_Unit.unit;
      };
      throw new Error("Failed pattern match at Main (line 36, column 5 - line 36, column 49): " + [ v.constructor.name ]);
  });
  exports["main"] = main;
  exports["execFrame"] = execFrame;
  exports["draw"] = draw;
  exports["update"] = update;
  exports["updateGameState"] = updateGameState;
  exports["updatePlayer"] = updatePlayer;
  exports["tilesize"] = tilesize;
  exports["drawTiles"] = drawTiles;
  exports["drawPlayer"] = drawPlayer;
  exports["keyHandler"] = keyHandler;
  exports["keyDownHandler"] = keyDownHandler;
  exports["keyUpHandler"] = keyUpHandler;
  exports["setKeyEvents"] = setKeyEvents;
})(PS);
PS["Main"].main();